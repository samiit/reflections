What happens when you initialize a repository? Why do you need to do it?
-> A new .git folder is created which contains meta-data about the status of the files in the repo. All commits if made would be tracked. Only after initializing a repo, we can add commits to it; make changes and track them!

How is the staging area different from the working directory and the repository? What value do you think it offers?
-> Staging area contains the most recent committed files in the repo.

When added from the working directory, it hosts the files from the working directory that need to be committed to the repo.
All changes we make in a file have to be added first to the staging area; otherwise, they won't be committed. Staging area hence contains the changes to be tracked in a given working directory before committing them to the repo.

It is the dynamic space where changes get hosted. We may not wish all files/changes from the working directory to be tracked in the first place. Therefore, the staging area gives more efficiency.


How can you use the staging area to make sure you have one commit per logical change?
-> Using git diff, we know which files have been changed. We can add them to the Staging area and commit them to the Repo one by one. In this way, we can ensure that whatever changes we did in the workspace, we add only one file at a time (hopefully with only one logical change at a time as well!). Using git diff, and git diff --staged, we can ensure one commit per logical change paradigm!

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-> i) Experiment a few unexplored features
ii) Customize a general purpose code for a specific domain
iii) Try out some translation work

How do the diagrams help you visualize the branch structure?
It shows the commit parent structure and the branches they are on. Besides, it helps to identify if there are any unreachable commits. This safeguards against losing required commmits.